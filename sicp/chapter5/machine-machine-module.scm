(load "machine-register-module.scm")
(load "machine-stack-module.scm")

(define (make-machine regs ops controller-text)
  (let ((machine (make-new-machine)))
    (for-each (lambda (name)
                ((machine 'allocate-register) name))
              regs)
    ((machine 'install-operations) ops)
    ((machine 'install-instruction-sequence)
     (assemble controller-text machine))
    machine))

(define (make-new-machine)
  (let ((stack (make-stack))
        (flag (make-register))
        (pc (make-register))
        (the-instruction-sequence '()))
    (let ((regs (list (cons 'pc pc)
                      (cons 'flag flag))) ; assoc of name->register-object
          (the-ops
           (list (list 'initialize-stack
                       (lambda () (stack 'initialize))))))
      (define (allocate-register name)
        (if (assoc name regs)
            (error 'machine "register exists: " name)
            (set! regs (cons (cons name (make-register)) regs)))
        'register-allocated)
      (define (lookup-register name)
        (let ((r (assoc name regs)))
          (if r
              (cdr r)
              (error 'machine "Unknown register: " name))))
      (define (execute)
        (let ((insts (get-contents pc)))
          (if (null? insts)
              'done
              (begin
                ((instruction-execution-proc (car insts)))
                (execute)))))
      (define (dispatch msg)
        (cond ((eq? msg 'allocate-register) allocate-register)
              ((eq? msg 'lookup-register) lookup-register)
              ((eq? msg 'install-operations)
               (lambda (ops) (set! the-ops (append the-ops ops))))
              ((eq? msg 'stack) stack)
              ((eq? msg 'operations) the-ops)
              ((eq? msg 'install-instruction-sequence)
               (lambda (seq) (set! the-instruction-sequence seq)))
              ((eq? msg 'start)
               (set-contents! pc the-instruction-sequence)
               (execute))
              (else
               (error 'machine "Unknown message: " msg))))
      dispatch)))

(define (get-register machine reg-name)
  ((machine 'lookup-register) reg-name))
(define (get-register-contents machine reg-name)
  (get-contents (get-register machine reg-name)))
(define (set-register-contents! machine reg-name v)
  (set-contents! (get-register machine reg-name) v))
(define (get-stack machine)
  (machine 'stack))
(define (get-operations machine)
  (machine 'operations))
(define (start machine)
  (machine 'start))

;; tests begin
(load "../testframe.scm")
(let ((m (make-new-machine)))
  (begin
    (for-each (lambda (name)
                ((m 'allocate-register) name))
              '(a b c))
    (asserteq? (get-register-contents m 'a) '*unassigned*)
    (asserteq? (get-register-contents m 'b) '*unassigned*)
    (asserteq? (get-register-contents m 'c) '*unassigned*)
    
    (set-register-contents! m 'a 1)
    (set-register-contents! m 'b 2)
    (set-register-contents! m 'c 3)

    (assert= (get-register-contents m 'a) 1)
    (assert= (get-register-contents m 'b) 2)
    (assert= (get-register-contents m 'c) 3)))
