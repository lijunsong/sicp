22-let-analysis-support.scm:(define (let-bindings exp)
22-let-analysis-support.scm:(define (let-body exp)
22-let-analysis-support.scm:(define (let-vars bindings)
22-let-analysis-support.scm:(define (let-vals bindings)
22-let-analysis-support.scm:(define (let->combination exp)
22-let-analysis-support.scm:  (cons (make-lambda (let-vars (let-bindings exp))
22-let-analysis-support.scm:                     (let-body exp))
22-let-analysis-support.scm:        (let-vals (let-bindings exp))))
22-let-analysis-support.scm:  (analyze (let->combination exp)))
6-let.scm:  (define (let-bindings exp)
6-let.scm:  (define (let-body exp)
6-let.scm:  (define (let-vars bindings)
6-let.scm:  (define (let-vals bindings)
6-let.scm:  (define (let->combination exp)
6-let.scm:    (cons (make-lambda (let-vars (let-bindings exp))
6-let.scm:                       (let-body exp))
6-let.scm:          (let-vals (let-bindings exp))))
6-let.scm:    (eval (let->combination exp) env))
8-named-let.scm:  (define (let-bindings exp)
8-named-let.scm:  (define (let-body exp)
8-named-let.scm:  (define (let-vars bindings)
8-named-let.scm:  (define (let-vals bindings)
8-named-let.scm:  (define (named-let->let exp)
8-named-let.scm:      (let ((procedure (make-lambda (let-vars bindings)
8-named-let.scm:                         (cons var (let-vals bindings))))))))
8-named-let.scm:  ;;; 2. let->combination supports named let now
8-named-let.scm:  (define (let->combination exp)
8-named-let.scm:        (let->combination (cdr (named-let->let exp)))
8-named-let.scm:        (cons (make-lambda (let-vars (let-bindings exp))
8-named-let.scm:                           (let-body exp))
8-named-let.scm:              (let-vals (let-bindings exp)))))
8-named-let.scm:    (eval (let->combination exp) env))
amb.scm:(define (let-bindings exp)
amb.scm:(define (let-body exp)
amb.scm:(define (let-vars bindings)
amb.scm:(define (let-vals bindings)
amb.scm:(define (let->combination exp)
amb.scm:  (cons (make-lambda (let-vars (let-bindings exp))
amb.scm:                     (let-body exp))
amb.scm:        (let-vals (let-bindings exp))))
amb.scm:  (analyze (let->combination exp)))
